version: '3.5'

services:

#  //****** DATABASE ******//
  mongo:
    image: mongo
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=auth
    volumes:
      - ./mongo:/data/db
    ports:
      - "27017:27017"
    networks:
      - example

#  //****** DATABASE INTERFACE ******//
  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    env_file: .env
    environment:
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
      - ME_CONFIG_MONGODB_PORT=${ME_CONFIG_MONGODB_PORT}
    depends_on:
      - mongo
    links:
      - mongo
    networks:
      - example

#  //****** PROXY, LOADBALANCING, STATIC FILES ******//
  nginx:
    build:
      context: ./nginx/
      dockerfile: Dockerfile
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/loadbalancer/include:/etc/nginx/include:ro
      - ./nginx/loadbalancer/conf.d:/etc/nginx/conf.d:ro
    ports:
      - 80:80
    networks:
      - example
    depends_on:
      - app
      - mongo
      - rq-server
      - rq-dashboard

#  //****** BACKEND APP ******//
  app:
    build:
      context: ./backend/
      dockerfile: Docker/Dockerfile
    env_file: .env
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - example
    volumes:
      - ./backend/src:/app/src
    depends_on:
      - mongo

#  //****** ELK STACK ******//
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.15.0
    env_file: .env
    environment:
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - "xpack.security.enabled=true"
    ports:
    - 9200:9200
    volumes:
      - es_data:/usr/share/elasticsearch/data
    networks:
      - example

  logstash:
    image: docker.elastic.co/logstash/logstash:7.15.0
    env_file: .env
    user: root
    volumes:
      - ./logstash.conf:/usr/share/logstash/pipeline/logstash.conf
      - ./logstash.yml:/usr/share/logstash/config/logstash.yml
      - logs:/var/log/apache2/html
      - logstash_sincedb:/usr/share/logstash/sincedb:rw
    ports:
      - 5044:5044
    depends_on:
      - elasticsearch
    environment:
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
    networks:
      - example

  kibana:
    hostname: kibana
    image: docker.elastic.co/kibana/kibana:7.15.0
    env_file: .env
    environment:
      - SERVER_BASEPATH=/kibana
      - SERVER_REWRITEBASEPATH=true
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD}
      - xpack.encryptedSavedObjects.encryptionKey=${ELASTICSEARCH_ENCRYPTION_KEY}
    ports:
    - 5601:5601
    depends_on:
      - elasticsearch
    networks:
      - example

#  //****** REDIS SERVER ******//
  rq-dashboard:
    image: jaredv/rq-docker:0.0.2 
    command: rq-dashboard -H rq-server
    ports:
      - 9181:9181

  rq-worker:
    image: jaredv/rq-docker:0.0.2
    command: rq worker -u redis://rq-server:6379 high normal low
    deploy:
      replicas: 3

  rq-server:
    image: redis:alpine
    ports:
      - 6379:6379

networks:
  example:
    
volumes:
  mongo:
    driver: local
  rq-server:
    driver: local
  es_data:
  logstash_sincedb:
  logs:
    name: logs