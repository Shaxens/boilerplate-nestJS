version: '3.5'

services:

  mongo:
    image: mongo
    restart: unless-stopped
    env_file: .env
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_INITDB_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_INITDB_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=auth
    volumes:
      - ./mongo:/data/db
    ports:
      - "27017:27017"
    networks:
      - example

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    env_file: .env
    environment:
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_ADMINUSERNAME=${ME_CONFIG_MONGODB_ADMINUSERNAME}
      - ME_CONFIG_MONGODB_ADMINPASSWORD=${ME_CONFIG_MONGODB_ADMINPASSWORD}
      - ME_CONFIG_MONGODB_SERVER=${ME_CONFIG_MONGODB_SERVER}
      - ME_CONFIG_BASICAUTH_USERNAME=${ME_CONFIG_BASICAUTH_USERNAME}
      - ME_CONFIG_BASICAUTH_PASSWORD=${ME_CONFIG_BASICAUTH_PASSWORD}
      - ME_CONFIG_MONGODB_PORT=${ME_CONFIG_MONGODB_PORT}
    depends_on:
      - mongo
    links:
      - mongo
    networks:
      - example

  nginx:
    build:
      context: ./nginx/
      dockerfile: Dockerfile
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/loadbalancer/include:/etc/nginx/include:ro
      - ./nginx/loadbalancer/conf.d:/etc/nginx/conf.d:ro
    ports:
      - 80:80
    networks:
      - example
    depends_on:
      - app
      - mongo

  app:
    build:
      context: ./backend/
      dockerfile: Docker/Dockerfile
    env_file: .env
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
    networks:
      - example
    volumes:
      - ./backend/src:/app/src
    depends_on:
      - mongo

networks:
  example:
  
volumes:
  mongo:
    driver: local
  rq-server:
    driver: local